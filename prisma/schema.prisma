generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String?           @unique
  wallet           String?           @unique
  privyUserId      String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  name             String?
  apiKeys          ApiKey[]
  merchantSettings MerchantSettings?
  sumsubApplications SumsubApplication[]
  referrals        Referral[]

  // referrals
  influencerProfile    InfluencerProfile?
}

model Referral {
  id                String   @id @default(uuid())
  privyUserId       String   @unique
  user              User     @relation(fields: [privyUserId], references: [privyUserId], onDelete: Cascade)
  influencerCode    String   // customCode from InfluencerProfile
  influencerName    String   // displayName snapshot
  bonusSnapshot     String?  // whatever you promised the invitee
  createdAt         DateTime @default(now())

  @@index([influencerCode])
}

model Counter {
  shard    String   @id // single char A-Z, 2-9
  nextVal  Int      @default(0)
  @@map("referral_counter")
}

model InfluencerProfile {
  id                   String                @id @default(uuid())
  userId               String                @unique
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Influencer details
  displayName          String
  description          String?
  socialLinks          Json?                 // {twitter: "...", instagram: "..."}
  isActive             Boolean               @default(true)
  
  // Referral settings
  customCode           String                @unique // Custom referral code
  
  // Tracking
  totalReferrals       Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  
}

model MerchantSettings {
  id                       String   @id @default(uuid())
  userId                   String   @unique
  businessName             String?
  businessEmail            String?
  businessPhone            String?
  businessCategory         String?
  businessDescription      String?
  autoSettlement           Boolean  @default(true)
  settlementThreshold      Float    @default(1000)
  settlementCurrency       String   @default("TSHC")
  paymentExpiry            Int      @default(60)
  twoFactorEnabled         Boolean  @default(false)
  twoFactorSecret          String?
  withdrawalConfirmation   Boolean  @default(true)
  transactionNotifications Boolean  @default(true)
  settlementNotifications  Boolean  @default(true)
  securityAlerts           Boolean  @default(true)
  marketingUpdates         Boolean  @default(false)
  webhookUrl               String?
  webhookSecret            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  keyId       String    @unique
  hashedKey   String
  environment String
  name        String?
  lastUsed    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([keyId])
  @@index([userId, environment])
}

model Transaction {
  id           String        @id @default(uuid())
  merchantId   String
  wallet       String
  amount       Float
  currency     String
  status       String
  txHash       String
  createdAt    DateTime      @default(now())
  invoiceId    String?       @unique
  Notification Notification? @relation("TransactionNotification")

  @@index([wallet])
  @@index([currency])
  @@index([createdAt])
}

model PaymentLink {
  id           String        @id @default(uuid())
  merchantId   String
  url          String        @unique
  amount       Float?
  currency     String?
  description  String?
  status       String
  createdAt    DateTime      @default(now())
  redeemedAt   DateTime?
  invoiceId    String?       @unique
  expiresAt    DateTime?     // Made optional
  signature    String        @default("")
  linkId       String?       @unique
  invoice      Invoice?      @relation("PaymentLinkInvoice")
  linkType     LinkType      @default(NORMAL) // Added link type
  offRampType  OffRampType?  // Added off-ramp type
  offRampValue String?       // Phone/bank account
  accountName String?       // Phone/bank account
  offRampProvider String?    // MNO/Bank name
  chainId      Int?          // Added chain ID
}

enum LinkType {
  NORMAL
  OFF_RAMP
}

enum OffRampType {
  PHONE
  BANK_ACCOUNT
}

model Notification {
  id                   String       @id @default(uuid())
  message              String
  recipient            String
  type                 String
  status               String
  createdAt            DateTime     @default(now())
  broadcastId          String?
  relatedTransactionId String?      @unique
  relatedTransaction   Transaction? @relation("TransactionNotification", fields: [relatedTransactionId], references: [id])
  broadcastNotification BroadcastNotification? @relation(fields: [broadcastId], references: [id])
}

model Invoice {
  id                String            @id @default(uuid())
  merchantId        String
  recipient         String
  sender            String            @default("not given")
  email             String
  paymentCollection String
  dueDate           DateTime
  currency          String
  totalAmount       Float             @default(0)
  status            String
  createdAt         DateTime          @default(now())
  sentAt            DateTime?
  paidAt            DateTime?
  canceledAt        DateTime?
  paymentLinkId     String?           @unique
  paymentLink       PaymentLink?      @relation("PaymentLinkInvoice", fields: [paymentLinkId], references: [id])
  lineItems         InvoiceLineItem[]
}

model InvoiceLineItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  amount      Float    @default(0)
  createdAt   DateTime @default(now())
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model OffRampTransaction {
  id           String        @unique
  createdAt    DateTime      @default(now()) 
  merchantId   String
  status       String
  amount       String        @default("...")
  currency     String        @default("...")
  accountName  String        @default("...")
  accountNumber String       @default("...")
  institution  String        @default("...")

  @@index([merchantId])
  @@index([currency])
  @@index([createdAt])
}

// broadcast notification
model BroadcastNotification {
  id        String   @id @default(cuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notifications Notification[]
}


//SUMSUB----------------------------------------------------------------------------------------
// Add these enums to your existing schema
enum SumsubVerificationStatus {
  INIT
  PENDING
  QUEUED
  PRECHECKED
  ON_HOLD
  COMPLETED
}

enum SumsubReviewAnswer {
  GREEN   // Approved
  RED     // Rejected
  YELLOW  // Manual review required
}

enum SumsubReviewRejectType {
  FINAL
  RETRY
}

enum SumsubWebhookEventType {
  APPLICANT_CREATED
  APPLICANT_PENDING
  APPLICANT_REVIEWED
  APPLICANT_ON_HOLD
  APPLICANT_RESET
  APPLICANT_DELETED
  VIDEO_IDENT_STATUS_CHANGED
}

// Main Sumsub application tracking
model SumsubApplication {
  id                    String                    @id @default(cuid())
  userId                String
  applicantId           String                    @unique  // Sumsub's applicant ID
  inspectionId          String                    @unique  // Sumsub's inspection ID
  externalUserId        String?                   // Your user ID sent to Sumsub
  levelName             String                    // Sumsub verification level
  applicantType         String?                   // individual, company
  verificationStatus    SumsubVerificationStatus  @default(INIT)
  reviewAnswer          SumsubReviewAnswer?
  reviewRejectType      SumsubReviewRejectType?
  sandboxMode           Boolean                   @default(false)
  
  // Timestamps
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  submittedAt           DateTime?                 // When applicant submitted docs
  reviewedAt            DateTime?                 // When review was completed
  
  // Relations
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  webhookEvents         SumsubWebhookEvent[]
  reviewHistory         SumsubReviewHistory[]
  
  @@map("sumsub_applications")
}

// Track all webhook events received from Sumsub
model SumsubWebhookEvent {
  id                    String                    @id @default(cuid())
  sumsubApplicationId   String
  correlationId         String                    @unique  // Sumsub's correlation ID for idempotency
  eventType             SumsubWebhookEventType
  payload               Json                      // Store full webhook payload
  processed             Boolean                   @default(false)
  processedAt           DateTime?
  errorMessage          String?                   // If processing failed
  createdAt             DateTime                  @default(now())
  
  // Relations
  sumsubApplication     SumsubApplication         @relation(fields: [sumsubApplicationId], references: [id], onDelete: Cascade)
  
  @@index([correlationId])
  @@index([eventType, createdAt])
  @@map("sumsub_webhook_events")
}

// Track review history and status changes
model SumsubReviewHistory {
  id                    String                    @id @default(cuid())
  sumsubApplicationId   String
  reviewAnswer          SumsubReviewAnswer
  reviewRejectType      SumsubReviewRejectType?
  rejectLabels          String[]                  // Array of rejection reasons
  buttonIds             String[]                  // Sumsub button IDs for rejection reasons
  moderationComment     String?                   // Sumsub's moderation comment
  clientComment         String?                   // Your custom comment
  reviewMode            String?                   // ongoingAML, ongoingDocExpired, etc.
  reviewedAt            DateTime                  @default(now())
  
  // Relations
  sumsubApplication     SumsubApplication         @relation(fields: [sumsubApplicationId], references: [id], onDelete: Cascade)
  
  @@map("sumsub_review_history")
}